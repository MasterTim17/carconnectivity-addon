name: Update build.yaml on new submodule release

on:
  push:
    branches:
      - dependabot/submodules/** # Triggered by Dependabot when a submodule is updated
  workflow_dispatch: # Allows manually triggering the action if needed

permissions:
  contents: write
  pull-requests: write

env:
  SUBMODULE_REPOS: |
    SEAT=https://github.com/tillsteinbach/CarConnectivity-connector-seatcupra.git
    SKODA=https://github.com/tillsteinbach/CarConnectivity-connector-skoda.git
    VW=https://github.com/tillsteinbach/CarConnectivity-connector-volkswagen.git
    TRONITY=https://github.com/tillsteinbach/CarConnectivity-connector-tronity.git
    MQTT=https://github.com/tillsteinbach/CarConnectivity-plugin-mqtt.git
    MQTTHA=https://github.com/tillsteinbach/CarConnectivity-plugin-mqtt_homeassistant.git
    CC=https://github.com/tillsteinbach/CarConnectivity.git
    WEBUI=https://github.com/tillsteinbach/CarConnectivity-plugin-webui.git

jobs:
  update-versions:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          submodules: true # Also clones submodules

      - name: Get latest versions of submodules main
        if: github.ref == 'refs/heads/main'
        run: |
          export LC_ALL=C

          get_latest_version() {
            repo_url=$1
            git ls-remote --tags "$repo_url" | awk -F'/v' '/refs\/tags\/v/{print $2}' | grep -E '^[0-9]+(\.[0-9]+)*$' | sort -V | tail -n 1
          }

          echo "Fetching latest versions for submodules..."
          for repo_entry in $SUBMODULE_REPOS; do
            name=$(echo "$repo_entry" | cut -d= -f1)
            repo=$(echo "$repo_entry" | cut -d= -f2)

            latest_version=$(get_latest_version "$repo")
            echo "LATEST_${name}_VERSION=$latest_version" >> $GITHUB_ENV
            echo "🔍 Found latest $name version: $latest_version"
          done

      - name: Get latest versions of submodules
        if: github.ref == 'refs/heads/beta'
        run: |
          export LC_ALL=C

          get_latest_version() {
            repo_url=$1
            git ls-remote --tags "$repo_url" | awk -F'/v' '/refs\/tags\/v/{print $2}' | sort -V | tail -n 1
          }

          echo "Fetching latest versions for submodules..."
          for repo_entry in $SUBMODULE_REPOS; do
            name=$(echo "$repo_entry" | cut -d= -f1)
            repo=$(echo "$repo_entry" | cut -d= -f2)

            latest_version=$(get_latest_version "$repo")
            echo "LATEST_${name}_VERSION=$latest_version" >> $GITHUB_ENV
            echo "🔍 Found latest $name version: $latest_version"
          done

      - name: Display old and new versions
        run: |
          echo "### Current and new versions:"

          compare_versions() {
            local component=$1
            local old_version=$(grep "${component}_VERSION" build.yaml | awk '{print $2}' | tr -d '"')
            local new_version="LATEST_${key}_VERSION"
            
            local repo_url=$(echo "$SUBMODULE_REPOS" | grep "^${key}=" | cut -d '=' -f2)
            local repo_name=$(basename "$repo_url" .git)

            if [ -n "$old_version" ] && [ "$old_version" != "${!new_version}" ]; then
              echo "🔄 ${key}_VERSION: $old_version → ${!new_version}"
              echo "- **${repo_name}** → (v${!new_version})\[${repo_url}\]" >> bot_changelog.md
            fi
          }

          for key in SEAT SKODA VW TRONITY MQTT MQTTHA CC WEBUI; do
            compare_versions "${key}"
          done

      - name: Update build.yaml
        run: |
          echo "Updating build.yaml with new versions"
          
          # Iterate through a list of components and update their versions in build.yaml
          for key in SEAT SKODA VW TRONITY MQTT MQTTHA CC WEBUI; do
            new_version="LATEST_${key}_VERSION"
            
            # Use sed to replace the existing version with the latest version dynamically
            sed -i "s/${key}_VERSION: .*/${key}_VERSION: \"${!new_version}\"/" build.yaml
          done
      
          # Check if build.yaml has changed after updates
          if git diff --quiet build.yaml; then
            echo "No update needed."
            echo "CHANGES=false" >> $GITHUB_ENV
          else
            echo "Changes detected."
            echo "CHANGES=true" >> $GITHUB_ENV
          fi
        
      - name: Increment version
        if: env.CHANGES == 'true'
        run: |
          # Extract current version from config.yaml
          version=$(grep 'version:' config.yaml | awk '{print $2}')
      
          # Split version into an array (e.g., 1.2.3 -> [1, 2, 3])
          IFS='.' read -r -a parts <<< "$version"
      
          # Increment the patch version (last number)
          parts[2]=$((parts[2] + 1))
      
          # Reconstruct the new version string
          new_version="${parts[0]}.${parts[1]}.${parts[2]}"
      
          # Update the version in config.yaml
          sed -i "s/version: .*/version: $new_version/" config.yaml
      
          # Append build/fixes section to the changelog
          echo "### 🛠️ Fixes & Updates" > build_changelog.md
          cat bot_changelog.md >> build_changelog.md
          rm bot_changelog.md
          echo -e "\n --- \n" >> build_changelog.md
          cat CHANGELOG.md >> build_changelog.md
          mv build_changelog.md CHANGELOG.md
      
          # Append new features section to the changelog (if exists)
          if [ -f next_changelog.md ]; then
            echo "### 🚀 New Features" > header_changelog.md
            cat next_changelog.md >> header_changelog.md
            rm next_changelog.md
            cat CHANGELOG.md >> header_changelog.md
            mv header_changelog.md CHANGELOG.md
          fi
      
          # Append the new version header section to the changelog
          echo -e "## $new_version\n" > version_CHANGELOG.md
          cat CHANGELOG.md >> version_CHANGELOG.md
          mv version_CHANGELOG.md CHANGELOG.md
      
          git add config.yaml CHANGELOG.md
          git commit -m "Increment version and build version to $new_version"
          git push

      - name: Commit and push changes on the Current Branch
        if: env.CHANGES == 'true'
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

          CURRENT_BRANCH=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')
          echo "Committing changes on branch: $CURRENT_BRANCH"

          git add build.yaml
          git add CHANGELOG.md
          git commit -m "Update build.yaml with latest submodule versions"
          git push origin "$CURRENT_BRANCH"

      - name: Create Pull Request
        if:  env.CHANGES == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update-versions-${{ github.run_id }} # Use a unique ID to avoid conflicts
          base: ${{ github.head_ref || github.ref_name }}
          title: "Update Submodule Versions"
          body: |
            Automatically generated by GitHub Actions.

            $(for key in SEAT SKODA VW TRONITY MQTT MQTTHA CC WEBUI; do echo "- **${key}_VERSION** → `${!key}`"; done)
