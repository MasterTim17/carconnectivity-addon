name: Update build.yaml on new submodule release

on:
  push:
    branches:
      - dependabot/submodules/** # Triggered by Dependabot when a submodule is updated
  workflow_dispatch: # Allows manually triggering the action if needed

permissions:
  contents: write
  pull-requests: write
  
jobs:
  update-versions:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          submodules: true # Also clones submodules

      - name: Get latest versions of submodules main
        if: github.ref == 'refs/heads/main'
        run: |
          export LC_ALL=C

          get_latest_version() {
            repo_url=$1
            git ls-remote --tags "$repo_url" | awk -F'/v' '/refs\/tags\/v/{print $2}' | grep -E '^[0-9]+(\.[0-9]+)*$' | sort -V | tail -n 1
          }

          echo "LATEST_SEAT_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity-connector-seatcupra.git)" >> $GITHUB_ENV
          echo "LATEST_SKODA_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity-connector-skoda.git)" >> $GITHUB_ENV
          echo "LATEST_VW_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity-connector-volkswagen.git)" >> $GITHUB_ENV
          echo "LATEST_TRONITY_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity-connector-tronity.git)" >> $GITHUB_ENV
          echo "LATEST_MQTT_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity-plugin-mqtt.git)" >> $GITHUB_ENV
          echo "LATEST_MQTT_HOMEASSISTANT_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity-plugin-mqtt_homeassistant.git)" >> $GITHUB_ENV
          echo "LATEST_CC_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity.git)" >> $GITHUB_ENV
          echo "LATEST_WEBUI_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity-plugin-webui.git)" >> $GITHUB_ENV

      - name: Get latest versions of submodules beta
        if: github.ref == 'refs/heads/beta'
        run: |
          export LC_ALL=C

          get_latest_version() {
            repo_url=$1
            git ls-remote --tags "$repo_url" | awk -F'/v' '/refs\/tags\/v/{print $2}' | sort -V | tail -n 1
          }

          echo "LATEST_SEAT_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity-connector-seatcupra.git)" >> $GITHUB_ENV
          echo "LATEST_SKODA_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity-connector-skoda.git)" >> $GITHUB_ENV
          echo "LATEST_VW_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity-connector-volkswagen.git)" >> $GITHUB_ENV
          echo "LATEST_TRONITY_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity-connector-tronity.git)" >> $GITHUB_ENV
          echo "LATEST_MQTT_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity-plugin-mqtt.git)" >> $GITHUB_ENV
          echo "LATEST_MQTT_HOMEASSISTANT_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity-plugin-mqtt_homeassistant.git)" >> $GITHUB_ENV
          echo "LATEST_CC_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity.git)" >> $GITHUB_ENV
          echo "LATEST_WEBUI_VERSION=$(get_latest_version https://github.com/tillsteinbach/CarConnectivity-plugin-webui.git)" >> $GITHUB_ENV

      - name: Display old and new versions
        run: |
          echo "### Current and new versions:"

          compare_versions() {
            local component=$1
            local old_version=$(grep "${component}_VERSION" build.yaml | awk '{print $2}' | tr -d '"')

            if [ -n "$old_version" ] && [ "$old_version" != "${!component}" ]; then
              echo "ðŸ”„ ${component}: $old_version â†’ ${!component}"
            fi
          }

          compare_versions "LATEST_SEAT_VERSION"
          compare_versions "LATEST_SKODA_VERSION"
          compare_versions "LATEST_VW_VERSION"
          compare_versions "LATEST_TRONITY_VERSION"
          compare_versions "LATEST_MQTT_VERSION"
          compare_versions "LATEST_MQTT_HOMEASSISTANT_VERSION"
          compare_versions "LATEST_CC_VERSION"
          compare_versions "LATEST_WEBUI_VERSION"

      - name: Update build.yaml
        run: |
          echo "Updating build.yaml with new versions"
          sed -i "s/SEAT_VERSION: .*/SEAT_VERSION: \"${LATEST_SEAT_VERSION}\"/" build.yaml
          sed -i "s/SKODA_VERSION: .*/SKODA_VERSION: \"${LATEST_SKODA_VERSION}\"/" build.yaml
          sed -i "s/VW_VERSION: .*/VW_VERSION: \"${LATEST_VW_VERSION}\"/" build.yaml
          sed -i "s/TRONITY_VERSION: .*/TRONITY_VERSION: \"${LATEST_TRONITY_VERSION}\"/" build.yaml
          sed -i "s/MQTT_VERSION: .*/MQTT_VERSION: \"${LATEST_MQTT_VERSION}\"/" build.yaml
          sed -i "s/MQTTHA_VERSION: .*/MQTTHA_VERSION: \"${LATEST_MQTT_HOMEASSISTANT_VERSION}\"/" build.yaml
          sed -i "s/CC_VERSION: .*/CC_VERSION: \"${LATEST_CC_VERSION}\"/" build.yaml
          sed -i "s/WEBUI_VERSION: .*/WEBUI_VERSION: \"${LATEST_WEBUI_VERSION}\"/" build.yaml

          if git diff --quiet build.yaml; then
            echo "No update needed."
            echo "CHANGES=false" >> $GITHUB_ENV
          else
            echo "Changes detected."
            echo "CHANGES=true" >> $GITHUB_ENV
          fi

      - name: Commit and push changes on the Current Branch
        if: env.CHANGES == 'true'
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

          CURRENT_BRANCH=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')
          echo "Committing changes on branch: $CURRENT_BRANCH"

          git add build.yaml
          git commit -m "Update build.yaml with latest submodule versions"
          git push origin "$CURRENT_BRANCH"

      - name: Create Pull Request
        if: env.CHANGES == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update-versions-${{ github.run_id }} # Use a unique ID to avoid conflicts
          base: ${{ github.head_ref || github.ref_name }}
          title: "Update Submodule Versions"
          body: |
            Automatically generated by GitHub Actions.

            - **SEAT_VERSION** â†’ `${LATEST_SEAT_VERSION}`
            - **SKODA_VERSION** â†’ `${LATEST_SKODA_VERSION}`
            - **VW_VERSION** â†’ `${LATEST_VW_VERSION}`
            - **TRONITY_VERSION** â†’ `${LATEST_TRONITY_VERSION}`
            - **MQTT_VERSION** â†’ `${LATEST_MQTT_VERSION}`
            - **MQTT_HOMEASSISTANT_VERSION** â†’ `${LATEST_MQTT_HOMEASSISTANT_VERSION}`
            - **CC_VERSION** â†’ `${LATEST_CC_VERSION}`
            - **WEBUI_VERSION** â†’ `${LATEST_WEBUI_VERSION}`
